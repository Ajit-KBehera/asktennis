version: "3.9"

services:
  db:
    image: postgres:16-alpine
    container_name: asktennis_prod_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: asktennis_prod
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DB_PASSWORD:-secure_password_here}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./data:/docker-entrypoint-initdb.d/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d asktennis_prod"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - asktennis_network

  app:
    build:
      context: .
      dockerfile: Dockerfile.production
    container_name: asktennis_prod_app
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 5000
      DATABASE_URL: postgresql://postgres:${DB_PASSWORD:-secure_password_here}@db:5432/asktennis_prod?sslmode=disable
      DB_HOST: db
      DB_PORT: 5432
      DB_NAME: asktennis_prod
      DB_USER: postgres
      DB_PASSWORD: ${DB_PASSWORD:-secure_password_here}
      GROQ_API_KEY: ${GROQ_API_KEY}
      SPORTRADAR_API_KEY: ${SPORTRADAR_API_KEY}
      DOCKER_ENV: true
      # Production optimizations
      DB_MAX_CONNECTIONS: 20
      DB_IDLE_TIMEOUT: 30000
      DB_CONNECTION_TIMEOUT: 10000
      CACHE_TIMEOUT: 600000
      HEALTH_CHECK_INTERVAL: 30000
    ports:
      - "5000:5000"
    volumes:
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - asktennis_network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Optional: Redis for advanced caching
  redis:
    image: redis:7-alpine
    container_name: asktennis_prod_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - asktennis_network

  # Optional: Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: asktennis_prod_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
    networks:
      - asktennis_network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  asktennis_network:
    driver: bridge
